////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОБЫТИЙ ФОРМЫ
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Отчет.КонецПериода = ТекущаяДата();
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru='Продажи по дисконтным картам'")
		+ УправлениеПечатьюРТКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода,
		Отчет.КонецПериода);
	
	//Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
	//	ЗаголовокОтчета = ЗаголовокОтчета + " " + Отчет.Организация;
	//КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

Функция ПолучениеДанныхЧерезСКД()
	
	СхемаКомпоновки = ПолучитьМакетНаСервере("СКДПродажиПоДисконтКартам");
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки)); 
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);

	Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", Отчет.НачалоПериода); 
	Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", Отчет.КонецПериода);
	
	ПараметрыОтбора = ПодготовитьПараметрыОтчета();
	
	Для каждого ЭлементОтбора Из Компоновщик.Настройки.Отбор.Элементы Цикл
		Если ПараметрыОтбора.Свойство(СокрЛП(ЭлементОтбора.ЛевоеЗначение)) Тогда			
			ЭлементОтбора.Использование			= Истина; 
			ЭлементОтбора.ПравоеЗначение		= ПараметрыОтбора[СокрЛП(ЭлементОтбора.ЛевоеЗначение)];
		КонецЕсли; 
	КонецЦикла; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(МакетКомпоновки);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(Процессор, Ложь);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция СоставитьТекстДляЗаголовкаПараметров()
	
	ТекстПериод =	"Начало отбора данных: " + Отчет.НачалоПериода + "
								|Окончание отбора данных: " + Отчет.КонецПериода;
								
	 Если ЗначениеЗаполнено(Отчет.ВидДисконтнойКарты) Тогда
		ТекстПериод = ТекстПериод + "|Вид дисконтной карты: " + Отчет.ВидДисконтнойКарты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.ДисконтнаяКарта) Тогда
		ТекстПериод = ТекстПериод + "|Дисконтная карта: " + Отчет.ДисконтнаяКарта;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.Магазин) Тогда
		ТекстПериод = ТекстПериод + "|Магазин: " + Отчет.Магазин;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Отчет.Номенклатура) Тогда
		ТекстПериод = ТекстПериод + "|Номенклатура :" + Отчет.Номенклатура;
	КонецЕсли; 

	Возврат ТекстПериод;	
		
КонецФункции
 

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	ОчиститьСообщения();
	
	 СформироватьОтчетНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьПериод(Команда)
		
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ
&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	//ОбновитьТекстЗаголовка(ЭтаФорма);
	//
	//Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
	//	ПроверкаКонтрагентовКлиент.СброситьАктуальностьОтчета(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	//ОбновитьТекстЗаголовка(ЭтаФорма);
	//
	//Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
	//	ПроверкаКонтрагентовКлиент.СброситьАктуальностьОтчета(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
&НаСервере
Процедура РассчитатьОбластьПечати()

	//ПерваяСтрока = 1;
	//
	//Если ОткрыватьПомощникИзМакета Тогда
	//	ПерваяСтрока = ПерваяСтрока + 1;
	//КонецЕсли;
	//
	//Результат.ОбластьПечати = Результат.Область(ПерваяСтрока,1,Результат.ВысотаТаблицы, Результат.ШиринаТаблицы);

КонецПроцедуры


&НаСервере
Функция СформироватьОтчетНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Макет = ПолучитьМакетНаСервере("ОтчетДисконтныеКарты");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПродажиПоДисконтнымКартам";

	ЗаголовокОтчета	= Макет.ПолучитьОбласть("Заголовок");
	ТекстПараметры		= Макет.ПолучитьОбласть("ПараметрыОтчета");
	ШапкаОтчета			= Макет.ПолучитьОбласть("ШапкаОтчета");
	СтрокаОтчета			= Макет.ПолучитьОбласть("СтрокаОтчета");
	ИтогоПродано			= Макет.ПолучитьОбласть("ИтогоПродано");
	
	ТабличныйДокумент.Вывести(ЗаголовокОтчета);
	
	ТекстПараметры.Параметры.Отборы = СоставитьТекстДляЗаголовкаПараметров();
	ТабличныйДокумент.Вывести(ТекстПараметры);
	
	ТабличныйДокумент.Вывести(ШапкаОтчета);
	
	ТЗРезультат = ПолучениеДанныхЧерезСКД();
	
	Для каждого строка Из ТЗРезультат Цикл
		СтрокаОтчета.Параметры.Заполнить(строка);
		//СтрокаОтчета.Параметры.ПроцентСкидки = ПолучитьСкидкуПоКарте(строка, строка.Период, Строка.ДисконтнаяКарта, строка.ВладелецДисконтнойКарты);
		ТабличныйДокумент.Вывести(СтрокаОтчета);
	КонецЦикла; 	
	     Результат = ТабличныйДокумент;
КонецФункции

//
Функция ПолучитьСкидкуПоКарте(строкаТЗ, ТекущаяДатаОбъекта, ДисконтнаяКарта, ВладелецКарты)
	
	ПараметрыРасчета	= Новый Структура;
	ВходныеПараметры	= Новый Структура;
	
	ВходныеПараметры.Вставить("ТолькоСообщенияПослеОформления", Ложь);
	ВходныеПараметры.Вставить("ПрименятьКОбъекту", Ложь);
	ВходныеПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	ВходныеПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	ВходныеПараметры.Вставить("УправляемыеСкидки", Неопределено);
	ВходныеПараметры.Вставить("ТолькоСообщенияПослеОформления", Ложь);
	ВходныеПараметры.Вставить("РабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
	// Скидки по дисконтным картам.
	ДисконтныеКарты = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ТекущаяДатаОбъекта, ДисконтнаяКарта, Истина);
	ВладелецКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВладелецКарты");
	
	ПараметрыРасчета.Вставить("ДисконтныеКарты"           , ДисконтныеКарты);
	ПараметрыРасчета.Вставить("ДисконтнаяКартаПредъявлена", Истина);
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(строкаТЗ.Период, строкаТЗ.Магазин, ВходныеПараметры));
	
	
	
	// Скидки на День рождения
	ПараметрыРасчета.Вставить("ДеньРождения", МаркетинговыеАкцииСервер.ПолучитьБлижайшийДеньРождения(ТекущаяДатаОбъекта, ВладелецКарты));
	
	// Скидки на кратность чека
	// Скидки на кратность порядкового номера продажи.
	//ВходныеПараметры.Свойство("ПорядковыйНомерПродажи", ПорядковыйНомерПродажи);
	//Если НЕ ЗначениеЗаполнено(ПорядковыйНомерПродажи)  Тогда
	//	ПорядковыйНомерПродажи = 0;
	//КонецЕсли;

	//ПараметрыРасчета.Вставить("ПорядковыйНомерПродажи", ПорядковыйНомерПродажи);
	
	// Скидки по типу получателя
	ПараметрыРасчета.Вставить("ПолучателиСкидок", ПолучитьМассивПолучателей(ДисконтнаяКарта, ВладелецКарты));
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	
	СтрокаТовары = Товары.Добавить();
	СтрокаТовары.Номенклатура			= строкаТЗ.Номенклатура;
	//Попытка
	//	СтрокаТовары.Характеристика		=	строкаТЗ.ХарактеристикаНоменклатуры;
	//Исключение
		СтрокаТовары.Характеристика		= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
	//КонецПопытки;	
	СтрокаТовары.Упаковка					= Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	СтрокаТовары.Количество				= 1;
	СтрокаТовары.КоличествоУпаковок	= 0;
	СтрокаТовары.Цена							= строкаТЗ.СуммаПродажи;
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	//ПараметрыРасчета.Вставить("Оплата",            Объект.Оплата.Выгрузить());
	ПараметрыРасчета.Вставить("ВалютаДокумента",   "");
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   "");
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("РасчетПодарков",    Истина);
	ПараметрыРасчета.Вставить("РасчетСообщений",   Истина);
	ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления", ВходныеПараметры.ТолькоСообщенияПослеОформления);
	
	
	
	//ПараметрыРасчета.Вставить("РабочееМесто", РабочееМесто);
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	//Если ВходныеПараметры.ПрименятьКОбъекту И НЕ ВходныеПараметры.ТолькоСообщенияПослеОформления Тогда
	//	Если ВходныеПараметры.Свойство("НачислениеБонусов") Тогда
	//		Объект.БонусныеБаллыКНачислению.Очистить();
	//		Если ПримененныеСкидкиНаценки.Свойство("ТаблицаНачисленныхБонусов") Тогда
	//			Для Каждого СтрокаБонуса Из ПримененныеСкидкиНаценки.ТаблицаНачисленныхБонусов Цикл
	//				НоваяСтрока = Объект.БонусныеБаллыКНачислению.Добавить();
	//				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонуса);
	//			КонецЦикла;
	//		КонецЕсли;
	//		
	//	Иначе
	//		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Товары", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, Истина);
	//		ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, "Подарки", ПримененныеСкидкиНаценки.ТаблицаПодарков, Объект.ЦенаВключаетНДС);
	//		Если ВходныеПараметры.Свойство("ПеренестиСкидкиПодаркиВТовары") Тогда
	//			ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС, ПримененныеСкидкиНаценки);
	//		КонецЕсли;
	//		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	

	
КонецФункции
//
&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
    ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
    Макет = ОтчетОбъект.ПолучитьМакет(ИмяМакета); 
    Возврат Макет;
КонецФункции

// Функция возвращает таблицу действующих скидок (наценок).
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(ТекущаяДата, Магазин, ВходныеПараметры)
	
	Запрос = Новый Запрос;
	Если ВходныеПараметры.ТолькоСообщенияПослеОформления Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|			&ТекущаяДата,
		|			(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ТекущаяДата
		|				ИЛИ ДатаОкончания = &ПустаяДата)
		|				И СкидкаНаценка.СпособПредоставления = &Сообщение
		|				И СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|				И (Магазин = &Магазин
		|					ИЛИ Магазин = &ПустойМагазин)) КАК ДействиеСкидокНаценокСрезПоследних";
		Запрос.УстановитьПараметр("Сообщение", Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|			&ТекущаяДата,
		|			(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ТекущаяДата
		|				ИЛИ ДатаОкончания = &ПустаяДата)
		|				И СкидкаНаценка.СпособПредоставления <> &ЗапретРозничнойПродажи
		|				И СкидкаНаценка.СпособПредоставления <> &КоличествоБонусныхБаллов
		|				И СкидкаНаценка.СпособПредоставления <> &ПроцентОтСуммыВВидеБонусныхБаллов
		|				И СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|				И (Магазин = &Магазин
		|					ИЛИ Магазин = &ПустойМагазин)) КАК ДействиеСкидокНаценокСрезПоследних";
		Запрос.УстановитьПараметр("ЗапретРозничнойПродажи", Перечисления.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи);
		Запрос.УстановитьПараметр("КоличествоБонусныхБаллов", Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов);
		Запрос.УстановитьПараметр("ПроцентОтСуммыВВидеБонусныхБаллов", Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1, 0, 0, 0));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	
	Если ЗначениеЗаполнено(Отчет.ВидДисконтнойКарты) Тогда
		ПараметрыОтчета.Вставить("ВидДисконтнойКарты", Отчет.ВидДисконтнойКарты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.ДисконтнаяКарта) Тогда
		ПараметрыОтчета.Вставить("ДисконтнаяКарта", Отчет.ДисконтнаяКарта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.Магазин) Тогда
		ПараметрыОтчета.Вставить("Магазин", Отчет.Магазин);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Отчет.Номенклатура) Тогда
		ПараметрыОтчета.Вставить("Номенклатура", Отчет.Номенклатура);
	КонецЕсли; 
	
	// Поддержка возможности формирования отчета за произвольный период
	//Если КонецДня(Отчет.КонецПериода) <> КонецКвартала(Отчет.НачалоПериода) ИЛИ НачалоДня(Отчет.НачалоПериода) <> НачалоКвартала(Отчет.НачалоПериода) Тогда
	//	ПараметрыОтчета.Вставить("КонецПериода", Отчет.КонецПериода);
	//КонецЕсли;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ПолучитьМассивПолучателей(ДисконтнаяКарта, Получатель, Контрагент = Неопределено)

	Получатели = Новый Массив;
	Получатели.Добавить(ДисконтнаяКарта);
	ВидДисконтнойКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВидДисконтнойКарты");
	Если ЗначениеЗаполнено(ВидДисконтнойКарты) Тогда
		Получатели.Добавить(ВидДисконтнойКарты)
	КонецЕсли;
	
	Получатели.Добавить(Получатель);
	
	ЗапросГруппыПолучателей = Новый Запрос;
	ЗапросГруппыПолучателей.Текст = "ВЫБРАТЬ
	|	СоставГруппПолучателейСкидки.ГруппаПолучателейСкидки КАК ГруппаПолучателей
	|ИЗ
	|	РегистрСведений.СоставГруппПолучателейСкидки КАК СоставГруппПолучателейСкидки
	|ГДЕ
	|	СоставГруппПолучателейСкидки.Получатель = &Получатель";
	ЗапросГруппыПолучателей.УстановитьПараметр("Получатель", Получатель);
	ВыборкаГруппыПолучателей = ЗапросГруппыПолучателей.Выполнить().Выбрать();
	Пока ВыборкаГруппыПолучателей.Следующий() Цикл
		Получатели.Добавить(ВыборкаГруппыПолучателей.ГруппаПолучателей);
	КонецЦикла;
	
    Если Контрагент <> Неопределено Тогда
        Получатели.Добавить(Контрагент);
		Если Контрагент <> Получатель Тогда
	 		ЗапросГруппыКонтрагентов = Новый Запрос;
			ЗапросГруппыКонтрагентов.Текст = "ВЫБРАТЬ
			|	СоставГруппПолучателейСкидки.ГруппаПолучателейСкидки КАК ГруппаПолучателей
			|ИЗ
			|	РегистрСведений.СоставГруппПолучателейСкидки КАК СоставГруппПолучателейСкидки
			|ГДЕ
			|	СоставГруппПолучателейСкидки.Получатель = &Получатель";
			ЗапросГруппыКонтрагентов.УстановитьПараметр("Получатель", Контрагент);
			ВыборкаГруппыКонтрагентов = ЗапросГруппыКонтрагентов.Выполнить().Выбрать();
			Пока ВыборкаГруппыКонтрагентов.Следующий() Цикл
				Получатели.Добавить(ВыборкаГруппыКонтрагентов.ГруппаПолучателей);
			КонецЦикла;
		КонецЕсли;
   КонецЕсли;
	
	Возврат Получатели;

КонецФункции
